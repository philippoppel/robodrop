name: Run Tests and Analyze Logs

on:
  push:
    branches:
      - main
      - test-branch  # Füge hier test-branch hinzu, damit der Workflow auf Push-Events im test-branch lauscht

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest

    steps:
      # Schritt 1: Repository auschecken
      - name: Check out code
        uses: actions/checkout@v3

      # Schritt 2: Python installieren
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      # Schritt 4: Tests ausführen und Logs generieren
      - name: Run Robot tests
        run: |
          robot --loglevel DEBUG tests/ > test_logs.txt || true

      - name: Show Test Logs
        run: cat test_logs.txt


    # Schritt 5: Log Analyzer ausführen, um Fehlerkategorien zu bestimmen
      - name: Analyze Logs
        run: |
          python analyze_logs.py test_logs.txt > error_report.txt

      # Schritt 6: Fehlerbericht anzeigen
      - name: Show Error Report
        run: cat error_report.txt

      # Schritt 7: Benachrichtigung durch Annotations hinzufügen (einfachster Weg)
      - name: Annotate Error Report
        run: |
          echo "::error file=error_report.txt::$(cat error_report.txt)"

      # Optional: Kommentar im PR hinzufügen (wenn es ein PR ist)
      - name: Comment on PR with Error Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const errorReport = fs.readFileSync('error_report.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Error Report\n\`\`\`${errorReport}\`\`\``
            });
